 (1) Events.py - Using Panda to explore the data. 
 
~/Development/Misc-Projects/Code$ ./Events.py

     sessionId             artist  n_events
103        849       3 Doors Down         2
116        849  Frightened Rabbit         2

     sessionId             artist  n_events
71         692      Paulina Rubio         2
103        849       3 Doors Down         2
116        849  Frightened Rabbit         2
174        888         Jason Mraz         2
251        898              Train         2
289        910     Arctic Monkeys         2
297        910      Justin Bieber         2

(2) Events_withbuildinlib.py - Using buildin libraries, find list of every sessionId that features at least two events for the same artist.

Using dictionary to have sessionId, Artist as keys and number of events as values.

~/Development/Misc-Projects/Code$ ./Events_withbuildinlib.py 
{('888', 'Jason Mraz'): 2, ('692', 'Paulina Rubio'): 2, ('849', 'Frightened Rabbit'): 2, ('898', 'Train'): 2, ('910', 'Justin Bieber'): 2, ('849', '3 Doors Down'): 2, ('910', 'Arctic Monkeys'): 2}

(3) Experimenting Apache Spark and Scala

~/Development/Misc-Projects/Code$ spark-submit --class SessionArtistEventCount --master local[*] path_to_your_jar.jar

~/Development/Misc-Projects/Code$ spark-shell

Spark context Web UI available at http://...home:4040
Spark context available as 'sc' (master = local[*], app id = local-1753745434777).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 3.2.0
      /_/
         
Using Scala version 2.12.15 (OpenJDK 64-Bit Server VM, Java 11.0.27)
Type in expressions to have them evaluated.
Type :help for more information.

scala> println("Hello World!")
Hello World!

